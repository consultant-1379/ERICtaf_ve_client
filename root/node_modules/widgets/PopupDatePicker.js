
define('text!widgets/PopupDatePicker/_popupDatePicker.html',[],function () { return '<div class="elWidgets-PopupDatePicker" tabindex="1">\n    <div class="elWidgets-PopupDatePicker-input">\n\t\t<input type="text" readonly="readonly" class="ebInput" />\n\t\t<i class="ebIcon ebIcon_close elWidgets-PopupDatePicker-cancelButton ebIcon_interactive"></i>\n        <i class="ebIcon ebIcon_calendar ebIcon_interactive"></i>\n\t</div>\n\t<div class="elWidgets-PopupDatePicker-popup">\n\t\t<div class="elWidgets-PopupDatePicker-closeButton">\n\t\t\t<i class="ebIcon ebIcon_close ebIcon_interactive elWidgets-PopupDatePicker-closeButtonIcon"></i>\n\t\t</div>\n\t\t<div class="elWidgets-PopupDatePicker-datePicker"></div>\n\t</div>\n</div>';});

define('styles!widgets/PopupDatePicker/_popupDatePicker.less',[],function () { return '.elWidgets-PopupDatePicker {\n  position: relative;\n  width: 159px;\n  outline: none;\n  height: 24px;\n}\n.elWidgets-PopupDatePicker-input {\n  position: relative;\n  margin: 0;\n}\n.elWidgets-PopupDatePicker-cancelButton {\n  position: absolute;\n  top: 5px;\n  right: 25px;\n  display: none;\n}\n.elWidgets-PopupDatePicker-popup {\n  position: relative;\n  border: 1px solid #b3b3b3;\n  border-radius: 3px;\n  padding: 5px 5px 0 5px;\n  width: 211px;\n  margin: 0;\n  z-index: 99999;\n  background-color: #FFFFFF;\n}\n.elWidgets-PopupDatePicker-closeButton {\n  width: 100%;\n  height: 15px;\n}\n.elWidgets-PopupDatePicker-closeButtonIcon {\n  float: right;\n}\n';});

define('widgets/PopupDatePicker/PopupDatePickerView',[
	'jscore/core',
	'text!./_popupDatePicker.html',
	'styles!./_popupDatePicker.less'
], function(core, template, style) {
	
	return core.View.extend({
		
		afterRender: function () {
			var element = this.getElement();
			this.input = element.find('.ebInput');
			this.popup = element.find('.elWidgets-PopupDatePicker-popup');
			this.datePicker = element.find('.elWidgets-PopupDatePicker-datePicker');
			this.closeButton = element.find('.elWidgets-PopupDatePicker-closeButtonIcon');
			this.calendarButton = element.find('.ebIcon_calendar');
			this.cancelButton = element.find('.elWidgets-PopupDatePicker-cancelButton');
		},
		
		getTemplate: function() {
			return template;
		},
		
		getStyle: function() {
			return style;
		},
		
		getOuterEl: function() {
			return this.element;
		},
		
		getInput: function() {
			return this.input;
		},
		
		setValue: function(value) {
			this.input.setValue(value);
		},
		
		setVisible: function (isVisible) {
			if(isVisible === false) {
				this.popup.setStyle('display', 'none');
			} else {
				this.popup.setStyle('display', 'block');
			}
		},
		
		getPopup: function() {
			return this.popup;
		},
		
		getDatePicker: function() {
			return this.datePicker;
		},
		
		getCancelButton: function() {
			return this.cancelButton;
		},
		
		getCloseButton: function() {
			return this.closeButton;
		},
		
		getCalendarButton: function() {
			return this.calendarButton;
		}
		
	});

});
define('widgets/PopupDatePicker/PopupDatePicker',[
	'widgets/WidgetCore',
	'./PopupDatePickerView',
	'widgets/DatePicker'
], function (WidgetCore, View, DatePicker) {
	
	/**
     * The PopupDatePicker class uses the Ericsson brand assets.<br>
     * The PopupDatePicker can be instantiated using the constructor PopupDatePicker.
     *
     * @example
	 *   var popupDatePicker = new PopupDatePicker();
	 *
     * @class PopupDatePicker
     * @extends WidgetCore
     * @beta
     */
	return WidgetCore.extend({
	
		View: View,
		
		/**
         * The init method is automatically called by the constructor when using the 'new' operator. If an object with
         * key/value pairs was passed into the constructor then the options variable will have those key/value pairs.
         *
         * @method init
         * @param {Object} options 
         * @private
         */
		init: function (options) {
			this.options = options || {};
			this.popupHasMouse = false;
		},
		
		/**
         * Overrides method from widget.
         * Executes every time, when added back to the screen.
         *
         * @method onViewReady
         * @private
         */
		onViewReady: function() {
		
			this.view.afterRender();
			
			this.datePicker = new DatePicker(this.options);
			this.datePicker.attachTo(this.view.getDatePicker());
			
			this.view.getPopup().setStyle('position', 'fixed');
			
			// Add handlers	
			this.setVisible(false);
			addOpenHandler.call(this);
			addCloseHandler.call(this);
			datePickerHandler.call(this);
			addCancelHandler.call(this);
		},
		
		/**
         * This method sets the visibility of the PopupDatePicker
         *
         * @method setVisible
         * @param {Boolean} isVisible
         */
		setVisible: function (isVisible) {
			this.view.setVisible(isVisible);
			this.visible = isVisible;
		},
		
		/**
         * Gets value from the DatePicker.
         *
         * @method getValue
         * @return {Date}
         */
		getValue: function() {
			return this.datePicker.getValue();
		},
		
		/**
         * Gets value from the text field.
         *
         * @method getInput
         * @return {String}
         */
		getInput: function() {
			return this.view.getInput().getValue();
		},
		
		/**
         * Updates text field.
         *
         * @method setValue
         * @param {String} value
         */
		setValue: function(value) {
			this.view.setValue(value);
		}
						
	});
	
	/* ++++++++++++++++++++++++++++++++++++++++++ PRIVATE METHODS ++++++++++++++++++++++++++++++++++++++++++ */
	
	/**
     *    Gets the value of the date picker.
     *    Updates text field and displays the cancel button in the text field.
     *
     *    @method datePickerHandler
     *    @private
     */
	function datePickerHandler() {
		this.datePicker.addEventHandler('dateselect', function () {
			var date = this.getValue();
			if (date) {
				this.setValue((date.getMonth() + 1) +'/' + date.getDate() +'/'+  date.getFullYear());
				this.view.getCancelButton().setStyle('display', 'block');
				this.setVisible(false);
			}
		}, this);
	}
	
	/**
     *    Hides the PopupDatePicker.
     *
     *    @method addCloseHandler
     *    @private
     */
	function addCloseHandler() {
		this.view.getCloseButton().addEventHandler('click', function () {
			this.setVisible(false);
		}, this);
	}
	
	/**
     *    Clears the text field.
     *    Hides the cancel button in the text field.
     *
     *    @method addCancelHandler
     *    @private
     */
	function addCancelHandler() {
		this.view.getCancelButton().addEventHandler('click', function () {
			this.setValue('');
			this.view.getCancelButton().setStyle('display', 'none');
		}, this);
	}
	
	/**
     *    Apply the click event onto the calendar icon to show/hide the popup area
     *    Sets up or clears interval.
	 *
     *    @method addOpenHandler
     *    @private
     */
	function addOpenHandler() {
		this.view.getCalendarButton().addEventHandler('click', function () {
			if (this.visible) {
				this.setVisible(false);
				if (this.posInterval) {
					clearInterval(this.posInterval);
					this.posInterval = undefined;
				}
			} else {
				this.setVisible(true);
				applyPosition.call(this);
			}
		}, this);
		
		this.view.getPopup().addEventHandler('mouseover', function () {
			this.popupHasMouse = true;
		}, this);
		
		this.view.getPopup().addEventHandler('mouseout', function () {
			this.popupHasMouse = false;
		}, this);
	}
	
	/**
     * Calculates new position, sets the position, and creates the interval.
     * Interval will change position of infopopup on pos change.
     *
     * @method applyPosition
     * @private
     */
	function applyPosition() {
        var pos = this.view.getInput().getPosition();
		
		if (!this._inputHeight) {
			this._inputHeight = this.view.getInput().getProperty('offsetHeight') + 3;
		}

        this.view.getPopup().setStyle({
            top: pos.top + this._inputHeight + 'px',
            left: pos.left + 'px'
        });

        if (!this.posInterval) {
            this.position = pos;
            this.posInterval = setInterval(function() {
                var curPosition = this.view.getInput().getPosition();
                if (this.position.top !== curPosition.top || this.position.left !== curPosition.left) {
                    this.view.getPopup().setStyle({
                        top: curPosition.top + this._inputHeight + 'px',
                        left: curPosition.left + 'px'
                    });
                    this.position = curPosition;
                    
                }
            }.bind(this), 1000 / 24);
        }
    }
	
});
define('widgets/PopupDatePicker', ['widgets/PopupDatePicker/PopupDatePicker'], function (main) { return main; });
