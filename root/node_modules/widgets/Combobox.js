
define('text!widgets/Combobox/_combobox.html',[],function () { return '<div class="ebCombobox">\n    <input type="text" class="ebInput ebInput_noRightSide"/>\n    <button type="button" class="ebCombobox-helper">\n        <span class="ebCombobox-iconHolder">\n            <i class="ebIcon ebIcon_small ebIcon_downArrow_10px eb_noVertAlign"></i>\n        </span>\n    </button>\n</div>';});

/*global define*/
define('widgets/Combobox/ComboboxView',[
    'jscore/core',
    'text!./_combobox.html'
], function (core, template) {
    

    var ComboboxView = core.View.extend({

        afterRender: function () {
            this.input = this.getElement().find('.' + ComboboxView.EL_INPUT);
            this.helper = this.getElement().find('.' + ComboboxView.EL_HELPER);
        },

        getTemplate: function () {
            return template;
        },

        getRoot: function () {
            return this.getElement();
        },

        getInput: function () {
            return this.input;
        },

        getHelper: function () {
            return this.helper;
        }

    }, {
        'EL_INPUT': 'ebInput',
        'EL_HELPER': 'ebCombobox-helper'
    });

    return ComboboxView;

});

/*global define*/
define('widgets/Combobox/Combobox',[
    'widgets/ItemsControl',
    './ComboboxView'
], function (ItemsControl, View) {
    

    /**
     * The Combobox class uses the Ericsson brand assets.<br>
     * The Combobox can be instantiated using the constructor Combobox.
     *
     * <strong>Constructor:</strong>
     *   <ul>
     *     <li>Combobox(Object options)</li>
     *   </ul>
     *
     * <strong>Events:</strong>
     *   <ul>
     *     <li>change: this event is triggered when value is changed in the Combobox</li>
     *     <li>focus: this event is triggered when the Combobox is focused</li>
     *     <li>click: this event is triggered when user clicks on the Combobox button</li>
     *   </ul>
     *
     * <strong>Options:</strong>
     *   <ul>
     *       <li>placeholder: a string used as a default name of the Combobox</li>
     *       <li>value: an object used as a selected item of the Combobox</li>
     *       <li>items: an array used as a list of available items in the Combobox</li>
     *       <li>enabled: boolean indicating whether the Combobox should be enabled. Default is true.</li>
     *       <li>modifiers: an array used to define modifiers for the Combobox.  (Asset Library)
     *         <a name="modifierAvailableList"></a>
     *         <br>E.g: modifiers:[{name: 'foo'}, {name: 'bar', value:'barVal'}]
     *         <ul style="padding-left: 15px;">
     *           <li>disabled: disabled</li>
     *         </ul>
     *       </li>
     *   </ul>
     *
     * @class Combobox
     * @extends ItemsControl
     * @beta
     */
    return ItemsControl.extend({
        /*jshint validthis:true */

        View: View,

        /**
         * The init method is automatically called by the constructor when using the "new" operator. If an object with
         * key/value pairs was passed into the constructor then the options variable will have those key/value pairs.
         *
         * @method init
         * @private
         * @param {Object} options
         */
        init: function (options) {
            this.selectedItem = {};
        },

        /**
         * Overrides method from ItemControl.<br>
         * Executes every time, when added back to the screen.
         *
         * @method onControlReady
         * @private
         */
        onControlReady: function () {
            this.setValue(this.options.value || {});
            this.setPlaceholder(this.options.placeholder || '');
        },

        /**
         * Sets value for the Combobox.
         *
         * @method setValue
         * @param {Object} value
         */
        setValue: function (value) {
            var valueName = '';
            if (value !== {}) {
                valueName = value.name;
            }
            this.selectedItem = value;
            this.view.getInput().setValue(valueName);
        },

        /**
         * Returns selected item object from the Combobox.
         *
         * @method getValue
         * @return {Object} value
         */
        getValue: function () {
            return this.selectedItem;
        },

        /**
         * Sets placeholder for the Combobox.
         *
         * @method setPlaceholder
         * @param {String} placeholder
         */
        setPlaceholder: function (placeholder) {
            this.view.getInput().setAttribute('placeholder', placeholder);
        },

        /**
         * Sets input field width for the Combobox.
         *
         * @method setInputSize
         * @param {string} wModifier Can be selected from available sizes: ['mini', 'small', 'long', 'xLong']<br>
         *     null to reset to default<br>
         *     ['miniW', 'smallW', 'longW', 'xLongW'] - deprecated names for input field sizes
         */
        setInputSize: function (wModifier) {
            // TODO: should be removed
            if (['miniW', 'smallW', 'longW', 'xLongW'].indexOf(wModifier) > -1) {
                wModifier = wModifier.replace('W', '');
            }

            // check if the modifier is a size modifier
            var possible = ['mini', 'small', 'long', 'xLong'];

            if (possible.indexOf(wModifier) !== -1) {
                this.view.getInput().setModifier('width', wModifier);
                this.currentInputSize = wModifier;
            } else if (this.currentInputSize) {
                this.view.getInput().removeModifier('width');
                this.currentInputSize = '';
            }
        },

        /**
         * A method which is called when enable() method is called.
         *
         * @method onEnable
         * @protected
         */
        onEnable: function () {
            this.view.getInput().setAttribute('disabled', false);
            this.view.getHelper().setAttribute('disabled', false);
        },

        /**
         * A method which is called when disable() method is called.
         *
         * @method onDisable
         * @protected
         */
        onDisable: function () {
            this.view.getInput().setAttribute('disabled', true);
            this.view.getHelper().setAttribute('disabled', true);
        },

        /**
         * A method which is called when an item is selected.
         *
         * @method onItemSelected
         * @protected
         *
         * @param {Object} selectedVal
         */
        onItemSelected: function(selectedVal) {
            if (selectedVal !== this.getValue()) {
                this.setValue(selectedVal);
                this.view.getInput().trigger('change');
            }
        }

    });

});

define('widgets/Combobox', ['widgets/Combobox/Combobox'], function (main) { return main; });
