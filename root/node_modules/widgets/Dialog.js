
define('text!widgets/Dialog/_dialog.html',[],function () { return '<div class="ebDialog">\n    <div class="ebDialog-holder">\n        <div class="ebDialogBox">\n            <div class="ebDialogBox-contentBlock">\n                <div class="ebDialogBox-primaryText"></div>\n                <div class="ebDialogBox-secondaryText"></div>\n                <div class="ebDialogBox-thirdText"></div>\n            </div>\n            <div class="ebDialogBox-actionBlock">\n                <button class="ebBtn ebBtn_color_darkBlue eb_wMargin ebDialog-primaryActionButton"></button>\n                <button class="ebBtn eb_wMargin ebDialog-secondaryActionButton"></button>\n                <button class="ebBtn eb_wMargin ebDialog-thirdActionButton"></button>\n            </div>\n        </div>\n    </div>\n</div>';});

/*global define*/
define('widgets/Dialog/DialogView',[
    'jscore/core',
    'text!./_dialog.html'
], function (core, template) {
    

    var DialogView = core.View.extend({

        afterRender: function () {
            this.contentBlock = this.getElement().find('.' + DialogView.EL_CONTENT_BLOCK);
            this.header = this.getElement().find('.' + DialogView.EL_HEADER);
            this.content = this.getElement().find('.' + DialogView.EL_CONTENT);
            this.optionalContent = this.getElement().find('.' + DialogView.EL_OPTIONAL_CONTENT);
            this.actionBlock = this.getElement().find('.' + DialogView.EL_ACTION_BLOCK);
            this.primaryBtn = this.getElement().find('.' + DialogView.EL_PRIMARY_BTN);
            this.secondaryBtn = this.getElement().find('.' + DialogView.EL_SECONDARY_BTN);
            this.thirdBtn = this.getElement().find('.' + DialogView.EL_THIRD_BTN);
        },

        getTemplate: function () {
            return template;
        },

        getRoot: function () {
            return this.getElement();
        },

        getContentBlock: function () {
            return this.contentBlock;
        },

        getHeader: function () {
            return this.header;
        },

        getContent: function () {
            return this.content;
        },

        getOptionalContent: function () {
            return this.optionalContent;
        },

        getActionBlock: function () {
            return this.actionBlock;
        },

        getPrimaryButton: function () {
            return this.primaryBtn;
        },

        getSecondaryButton: function () {
            return this.secondaryBtn;
        },

        getThirdButton: function () {
            return this.thirdBtn;
        }

    }, {
        EL_CONTENT_BLOCK: 'ebDialogBox-contentBlock',
        EL_HEADER: 'ebDialogBox-primaryText',
        EL_CONTENT: 'ebDialogBox-secondaryText',
        EL_OPTIONAL_CONTENT: 'ebDialogBox-thirdText',
        EL_ACTION_BLOCK: 'ebDialogBox-actionBlock',
        EL_PRIMARY_BTN: 'ebDialog-primaryActionButton',
        EL_SECONDARY_BTN: 'ebDialog-secondaryActionButton',
        EL_THIRD_BTN: 'ebDialog-thirdActionButton'
    });

    return DialogView;

});

define('text!widgets/Button/_button.html',[],function () { return '<button class="ebBtn">\n    <span class="ebBtn-caption"></span>\n</button>';});

/*global define*/
define('widgets/Button/ButtonView',[
    'jscore/core',
    'text!./_button.html'
], function (core, template) {
    

    var ButtonView = core.View.extend({

        init: function () {
            // used for the icon, icon depends on button size
            this.size = 'medium';
        },

        setSize: function (size) {
            if (size) {
                this.size = size;
                var icnElt = this.getIcon();
                if (icnElt && this.size !== 'medium') {
                    icnElt.setModifier(this.size);
                }
            }
        },

        getTemplate: function () {
            return template;
        },

        getCaption: function () {
            return this.getElement().find('.' + ButtonView.BTN_CAPTION);
        },

        getIcon: function () {
            return this.getElement().find('.' + ButtonView.EB_ICON);
        },

        setIcon: function (options) {
            var iconElt = this.getIcon();
            var caption = this.getCaption();

            if (options) {
                if (!iconElt) {
                    iconElt = core.Element.parse('<i></i>');
                    iconElt.setAttribute('class', ButtonView.EB_ICON);

                    var position = options.position;
                    var captionText = caption.getText().trim();

                    if (position && position === 'left') {
                        caption.detach(); // no prepend in JSCore
                        caption.setText(' ' + captionText);
                        this.getElement().append(iconElt);
                        this.getElement().append(caption);
                    } else {
                        this.getElement().append(iconElt);
                        caption.setText(captionText + ' ');
                    }
                }

                iconElt.setModifier(options.name);
                this.setSize(this.size);
            } else {
                // remove the icon elt if options is null
                if (iconElt) {
                    iconElt.remove();
                }
            }
        }

    }, {
        BTN_CAPTION: 'ebBtn-caption',
        EB_ICON: 'ebIcon'
    });
    return ButtonView;
});

/*global define*/
define('widgets/Button/Button',[
    'widgets/WidgetCore',
    './ButtonView'
], function (WidgetCore, View) {
    

    /**
     * The Button class wraps the Ericsson brand assets button in a Widget.<br>
     * The Button can be instantiated using the constructor Button.
     *
     * <strong>Events:</strong>
     * <ul>
     *     <li>click - Triggers when the button has been clicked.</li>
     * </ul>
     *
     * The following options are accepted:
     *   <ul>
     *       <li>caption: a string used as a button caption.</li>
     *       <li>enabled: boolean indicating whether button should be enabled. Default is true.</li>
     *       <li>type: button|submit|reset, button is default.</li>
     *       <li>modifiers: an array used to define modifiers for the Button. (Asset Library)
     *          <a name="modifierAvailableList"></a>
     *          <br>E.g: modifiers:[{name: 'foo'}, {name: 'bar', value:'barVal'}]
     *          <ul style="padding-left: 15px;">
     *              <li>"disabled" - disabled (equiv DOM attribute disabled) (Asset Library)</li>
     *              <li>Width modifiers:
     *              <br>width_small, width_large
     *              <br>E.g: modifiers:[{name: 'width', value:'large'}]
     *              <li>Color modifiers:
     *              <br>color_darkGreen, color_green, color_orange, color_red, color_purple, color_paleBlue
     *              <br>E.g: modifiers:[{name: 'color', value:'green'}]
     *              <br>(List of colors defined in the Asset Library)
     *              </li>
     *          </ul>
     *       </li>
     *       <li>type: a string used as a button type attribute. Default is 'button'.</li>
     *   </ul>
     *
     * @class Button
     * @extends WidgetCore
     * @baselined
     */
    return WidgetCore.extend({

        View: View,

        /**
         * Overrides method from widget.
         * Executes every time, when added back to the screen.
         *
         * @method onViewReady
         * @private
         */
        onViewReady: function () {
            this.setCaption(this.options.caption || 'Button');
            this.setModifiers(this.options.modifiers || []);
            this.setType(this.options.type || 'button');

            if (this.options.enabled === false) {
                this.disable();
            }

            if (this.options.icon){
                this.setIcon(this.options.icon);
            }

            this.getElement().addEventHandler('click', function () {
                this.trigger('click');
            }, this);
        },

        /**
         * Sets caption for the button.
         *
         * @method setCaption
         * @param {String} caption
         */
        setCaption: function (caption) {
            this.view.getCaption().setText(caption);
        },

        /**
         * Sets icon for the button.<br>
         * position: left, right (default)<br>
         * name: icon name<br>
         *
         * @method setIcon
         * @param {object} icon null to remove
         * @example
         *   button.setIcon({
         *       position: 'left',
         *       name: 'refresh'
         *   })
         *
         */
        setIcon: function (icon) {
            this.view.setIcon(icon);
        },

        /**
         * Sets 'type' attribute for the button.<br>
         * types: submit, button (default), reset
         *
         * @method setType
         * @param type
         * @example
         *   button.setType('submit');
         */
        setType: function (type) {
            this.getElement().setAttribute('type', type);
        },

        /**
         * Enables the button.
         *
         * @method enable
         */
        enable: function () {
            this.getElement().setAttribute('disabled', null);
            this.removeModifier('disabled');
        },

        /**
         * Disables the button.
         *
         * @method disable
         */
        disable: function () {
            this.getElement().setAttribute('disabled', 'disabled');
            this.setModifier('disabled');
        }

    });

});

define('widgets/Button', ['widgets/Button/Button'], function (main) { return main; });

/*global define*/
define('widgets/Dialog/Dialog',[
    'jscore/core',
    'widgets/WidgetCore',
    './DialogView',
    'widgets/Button'
], function (core, WidgetCore, View, Button) {
    

    /**
     * The Dialog class uses the Ericsson brand assets.<br>
     * The Dialog can be used as message window or popup window with action.<br>
     * The Dialog can be instantiated using the constructor Dialog.
     *
     * The following options are accepted:
     *   <ul>
     *       <li>header: a string used as a Dialog header. Default is 'Header'.</li>
     *       <li>content: a Widget or string used as a Dialog content. <b>Element is deprecated for content</b>. Default is 'Content'.</li>
     *       <li>optionalContent: a Widget or string used as a Dialog content. Default is undefined and not shown.</li>
     *       <li>visible: a boolean indicating whether a Dialog should be visible. Default is false.</li>
     *       <li>showPrimaryButton: a boolean indicating whether a Dialog should have primary action button. Default is true. <b>Deprecated</b>.</li>
     *       <li>primaryButtonCaption: a string used as primary action button caption. Default is 'Save'. <b>Deprecated</b>.</li>
     *       <li>secondaryButtonCaption: a string used as secondary action button caption. Default is 'Cancel'. <b>Deprecated</b>.</li>
     *       <li>type: a string used to define the Dialog type.</li>
     *       <li>buttons: an array used to define list of buttons.<br>
     *           buttons: [
     *             {caption: 'Save', action: callback, color: 'red'},
     *             {caption: 'Discard', action: callback},
     *             {caption: 'Cancel', action: callback}
     *           ]
     *       </li>
     *   </ul>
     *
     * @class Dialog
     * @beta
     */
    // !!! DO NOT ADD info that Dialog extends WidgetCore.
    return WidgetCore.extend({

        View: View,

        /**
         * Overrides method from widget.
         * Executes every time, when added back to the screen.
         *
         * @method onViewReady
         * @private
         */
        onViewReady: function () {
            this.setHeader(this.options.header || 'Header');
            this.setContent(this.options.content || 'Content');
            this.setOptionalContent(this.options.optionalContent);

            if (this.options.buttons) {
                this.view.getPrimaryButton().remove();
                this.view.getSecondaryButton().remove();
                this.view.getThirdButton().remove();

                this.setButtons(this.options.buttons || [
                    {name: 'Close', action: function () { this.hide(); }.bind(this)}
                ]);
            } else {
                // TODO: should be removed with new MAJOR version.
                this.setPrimaryButtonCaption(this.options.primaryButtonCaption || 'Save');
                this.setSecondaryButtonCaption(this.options.secondaryButtonCaption || 'Cancel');
                this.setThirdButtonCaption(this.options.thirdButtonCaption || 'Other');
            }

            this.setDialogType(this.options.type || 'default');

            if (this.options.showPrimaryButton === false) {
                this.hidePrimaryButton();
            }
            if (this.options.showThirdButton === undefined || this.options.showThirdButton === false) {
                this.hideThirdButton();
            }

            this.visible = false;
            if (this.options.visible === true) {
                this.show();
            }
        },

        /**
         * Sets header for the dialog.
         *
         * @method setHeader
         * @param {String} headerText
         */
        setHeader: function (headerText) {
            this.view.getHeader().setText(headerText);
        },

        /**
         * Sets content for the Dialog.
         *
         * @method setContent
         * @param {Widget|Element|String} content Element type is deprecated here!
         */
        setContent: function (content) {
            // TODO: "content instanceof core.Element" should be removed with new MAJOR version
            if (typeof(content) === 'string' || content instanceof core.Widget || content instanceof core.Element) {
                var children = this.view.getContent().children();
                if (children.length > 0) {
                    children.forEach(function (child) {
                        child.detach();
                    });
                }
                this.view.getContent().setText('');

                if (typeof(content) === 'string' || content instanceof core.Element) {
                    var contentElement = content;
                    if (typeof(content) === 'string') {
                        contentElement = core.Element.parse('<p></p>');
                        contentElement.setText(content);
                    }
                    this.view.getContent().append(contentElement);
                } else {
                    content.attachTo(this.view.getContent());
                }
            } else {
                throw new Error('Content for Dialog should be Widget or String!');
            }
        },

        /**
         * Sets optional content for the Dialog.
         *
         * @method setOptionalContent
         * @param {Widget|String} optionalContent
         */
        setOptionalContent: function (optionalContent) {
            if (optionalContent === undefined) {
                this.view.getOptionalContent().detach();
                return;
            }

            if (typeof(optionalContent) === 'string' || optionalContent instanceof core.Widget) {
                var children = this.view.getOptionalContent().children();
                if (children.length > 0) {
                    children.forEach(function (child) {
                        child.detach();
                    });
                }
                this.view.getOptionalContent().setText('');

                if (typeof(optionalContent) === 'string') {
                    var contentElement = core.Element.parse('<p></p>');
                    contentElement.setText(optionalContent);
                    this.view.getOptionalContent().append(contentElement);
                } else {
                    optionalContent.attachTo(this.view.getOptionalContent());
                }
            } else {
                throw new Error('Content for Dialog should be Widget or String!');
            }
        },

        /**
         * Sets buttons with actions to the Dialog's action block
         *
         * @method setButtons
         * @param {Array} buttons An array used to define list of buttons.
         *
         * @example
         *   buttons: [
         *     {caption: 'Save', action: callback, color: 'red'},
         *     {caption: 'Discard', action: callback},
         *     {caption: 'Cancel', action: callback}
         *   ]
         */
        setButtons: function (buttons) {
            var $buttonsHolder = this.view.getActionBlock();
            $buttonsHolder.children().forEach(function ($button) {
                $button.detach();
            });
            if (this.buttons) {
                this.buttons.forEach(function (button) {
                    button.destroy();
                });
            }

            var firstButton = buttons[0];
            if (!firstButton.color) {
                firstButton.color = 'darkBlue';
            }

            this.buttons = [];
            buttons.forEach(function (buttonObj) {
                var button = new Button({
                    caption: buttonObj.caption,
                    modifiers: [
                        {name: 'wMargin', prefix: 'eb'}
                    ]
                });

                if (buttonObj.color) {
                    button.setModifier('color', buttonObj.color);
                }
                button.addEventHandler('click', buttonObj.action);

                button.attachTo(this.view.getActionBlock());
                this.buttons.push(button);
            }.bind(this));
        },

        /**
         * Returns array of all buttons from the Dialog.
         *
         * @method getButtons
         * @returns {Array}
         */
        getButtons: function () {
            return this.buttons;
        },

        /**
         * Sets the dialog type.<br>
         *
         * @method setDialogType
         * @param {String} type Available values: default, confirmation, information, warning and error.
         */
        setDialogType: function (type) {
            var possibleTypes = ['warning', 'error', 'confirmation', 'information'];
            if (possibleTypes.indexOf(type) !== -1) {
                this.view.getContentBlock().setModifier('type', type);
            } else {
                this.view.getContentBlock().removeModifier('type');
            }
        },

        /**
         * Shows the Dialog.
         *
         * @method show
         */
        show: function () {
            this.visible = true;

            var body = core.Element.wrap(document.body);
            body.append(this.getElement());
        },

        /**
         * Hides the Dialog.
         *
         * @method hide
         */
        hide: function () {
            if (this.isVisible()) {
                this.visible = false;
                this.getElement().detach();
            }
        },

        /**
         * Returns boolean of the Dialog visible state.
         *
         * @method isVisible
         * @return {boolean}
         */
        isVisible: function () {
            return this.visible;
        },

        /**
         * Sets primary button caption for the Dialog.
         *
         * @method setPrimaryButtonCaption
         * @deprecated
         *
         * @param {String} buttonCaption
         */
        setPrimaryButtonCaption: function (buttonCaption) {
            this.getPrimaryButton().setText(buttonCaption);
        },

        /**
         * Sets secondary button caption for the Dialog.
         *
         * @method setSecondaryButtonCaption
         * @deprecated
         *
         * @param {String} buttonCaption
         */
        setSecondaryButtonCaption: function (buttonCaption) {
            this.getSecondaryButton().setText(buttonCaption);
        },
        
        /**
         * Sets third button caption for the Dialog.
         *
         * @method setThirdButtonCaption
         * @deprecated
         *
         * @param {String} buttonCaption
         */
        setThirdButtonCaption: function (buttonCaption) {
            this.getThirdButton().setText(buttonCaption);
        },
        
        /**
         * Hides primary button for the Dialog.
         *
         * @method hidePrimaryButton
         * @deprecated
         */
        hidePrimaryButton: function () {
            this.getPrimaryButton().detach();
        },
        
         /**
          * Hides secondary button for the Dialog.
          *
          * @method hideSecondaryButton
          * @deprecated
          */
        hideSecondaryButton: function () {
            this.getSecondaryButton().detach();
        },
        
        /**
         * Hides third button for the Dialog.
         *
         * @method hideThirdButton
         * @deprecated
         */
        hideThirdButton: function () {
            this.getThirdButton().detach();
        },

        /**
         * Shows primary button for the Dialog.
         *
         * @method showPrimaryButton
         * @deprecated
         */
        showPrimaryButton: function () {
            this.getPrimaryButton().detach();
            this.getSecondaryButton().detach();
            this.getThirdButton().detach();

            this.view.getActionBlock().append(this.getPrimaryButton());
            this.view.getActionBlock().append(this.getSecondaryButton());
            this.view.getActionBlock().append(this.getThirdButton());
        },

        /**
         * A shorthand for dialog.view.getPrimaryButton().
         *
         * @method getPrimaryButton
         * @deprecated
         *
         * @return {Element}
         */
        getPrimaryButton: function () {
            return this.view.getPrimaryButton();
        },

        /**
         * A shorthand for dialog.view.getSecondaryButton().
         *
         * @method getSecondaryButton
         * @deprecated
         *
         * @return {Element}
         */
        getSecondaryButton: function () {
            return this.view.getSecondaryButton();
        },
        
        /**
         * A shorthand for dialog.view.getThirdButton().
         *
         * @method getThirdButton
         * @deprecated
         *
         * @return {Element}
         */
        getThirdButton: function () {
            return this.view.getThirdButton();
        }

    });

});
define('widgets/Dialog', ['widgets/Dialog/Dialog'], function (main) { return main; });
