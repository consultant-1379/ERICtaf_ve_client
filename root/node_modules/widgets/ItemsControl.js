
/*global define*/
define('widgets/ItemsControl/ItemsControl',[
    'widgets/WidgetCore',
    'widgets/ComponentList'
], function (WidgetCore, ComponentList) {
    

    /**
     * An abstract class for widgets to extend from. Supply a custom view. When any element in that view is clicked, a list of items will be displayed.
     * There are functions such as onControlReady and onItemSelected that should be overrided for custom behaviour. Please see the tutorial <a href="../../example-itemscontrol.html">here</a> for more information.
     *
     * <strong>Constructor:</strong>
     *   <ul>
     *     <li>ItemsControl(Object options)</li>
     *   </ul>
     *
     * <strong>Events:</strong>
     *   <ul>
     *     <li>focus: this event is triggered when the ItemsControl is focused</li>
     *     <li>click: this event is triggered when user clicks on the ItemsControl</li>
     *   </ul>
     *
     * <strong>Options:</strong>
     *   <ul>
     *       <li>items: an array used as a list of available items in the ItemsControl</li>
     *       <li>enabled: boolean indicating whether the ItemsControl should be enabled. Default is true.</li>
     *       <li>modifiers: an array used to define modifiers for the ItemsControl. Available modifiers depend on the subclass that extends this class.</li>
     *   </ul>
     *
     * @class ItemsControl
     * @extends WidgetCore
     * @beta
     */
    return WidgetCore.extend({
        /*jshint validthis:true*/

        /**
         * Overrides method from widget.
         * Executes every time, when added back to the screen.
         *
         * @method onViewReady
         * @private
         */
        onViewReady: function () {
            if (this.options.enabled === false) {
                this.disable();
            } else {
                this.enable();
            }

            this.setItems(this.options.items || []);
            this.setModifiers(this.options.modifiers || []);

            this.getElement().addEventHandler('change', function () {
                this.trigger('change');
            }, this);

            this.getElement().addEventHandler('focus', function () {
                this.trigger('focus');
            }, this);

            this.getElement().addEventHandler('click', function (e) {
                this.trigger('click');
                this.toggle();
            }, this);

            this.onControlReady();
        },

        /**
         * Returns the Class reference to ComponentList
         *
         * @method getComponentListClass
         * @protected
         * @return {ComponentList} ComponentListClass
         */
        getComponentListClass: function() {
            return ComponentList;
        },

        /**
         * Called after view is ready.
         *
         * @method onControlReady
         */
        onControlReady: function() {},

        /**
         * Sets the width of the list. Accepts a CSS style.
         *
         * @method setWidth
         * @param {String} widthCSS
         */
        setWidth: function(widthCSS) {
            this.options.width = widthCSS;

            if (this.componentList) {
                this.componentList.options.width = widthCSS;
            }
        },

        /**
         * Sets items for the ItemsControl. If items array is empty than field is disabled.
         *
         * @method setItems
         * @param {Array} items
         */
        setItems: function (items) {
            if (this.componentList) {
                this.componentList.destroy();
                delete this.componentList;
            }

            if (items.length > 0) {
                if (this.componentList === undefined) {
                    var Klass = this.getComponentListClass();
                    this.componentList = new Klass({
                        items: items,
                        parent: this.getElement(),
                        persistent: this.options.persistent,
                        width: this.options.width
                    });
                    this.componentList.addEventHandler('itemSelected', this.onComponentListClick, this);

                    if (this.enabled === false) {
                        this.disable();
                    } else {
                        this.enable();
                    }
                }
            } else {
                this.getElement().setModifier('disabled');
                this.onDisable();
            }

            this.items = items;
            this.onItemsSet();
        },

        /**
         * Called when the items have been set on the list. Override this.
         *
         * @method onItemsSet
         */
        onItemsSet: function() {},

        /**
         * Called when the component list shows itself. Override this.
         *
         * @method onListShow
         */
        onListShow: function() {},

        /**
         * Called when the component list hides itself. Override this.
         *
         * @method onListHide
         */
        onListHide: function() {},

        /**
         * Toggles the component list manually.
         *
         * @method toggle
         */
        toggle: function() {
            if (this.componentList && this.enabled) {
                this.componentList.toggle();

                if (this.componentList.isShowing) {
                    this.onListShow();
                } else {
                    this.onListHide();
                }
            }
        },

        /**
         * Enables the ItemsControl.
         *
         * @method enable
         */
        enable: function () {
            this.enabled = true;
            this.getElement().removeModifier('disabled');
            this.getElement().addEventHandler('click', this.onParentClick, this);
            this.onEnable();
        },

        /**
         * Called when the component list is enabled. Override this.
         *
         * @method onEnable
         */
        onEnable: function() {},


        /**
         * Disables the ItemsControl.
         *
         * @method disable
         */
        disable: function () {
            this.enabled = false;
            this.getElement().setModifier('disabled');
            this.onDisable();
        },

        /**
         * Called when the component list is disabled. Override this.
         *
         * @method onDisable
         */
        onDisable: function() {},

        /**
         * An event which is executed when clicked on the ItemsControl
         *
         * @method onItemsControlClick
         * @private
         */
        onParentClick: function() {
            this.getElement().trigger('focus');
        },

        /**
         * An event which is executed when a value is selected from the ComponentList
         *
         * @method onComponentListClick
         * @private
         */
        onComponentListClick: function() {
            var selectedVal = this.componentList.getSelectedValue();
            if (selectedVal) {
                this.onItemSelected(selectedVal);
            }
        },

        /**
         * Called when an item on the component list is selected. Override this.
         *
         * @method onItemSelected
         * @param {Object} selectedValue
         */
        onItemSelected: function(selectedValue) {}

    });
});

define('widgets/ItemsControl', ['widgets/ItemsControl/ItemsControl'], function (main) { return main; });
